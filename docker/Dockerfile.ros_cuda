## Inspired by: https://hackmd.io/ZmWQz8azTdWNVoCc9Bf3QA |

# To build Pytorch (https://qengineering.eu/install-pytorch-on-jetson-nano.html | https://github.com/dusty-nv/jetson-containers/blob/master/packages/pytorch/build.sh | https://github.com/hillct/jetson-containers-extra/blob/develop/Dockerfile)
# ros:humble-ros-base-jammy, ros:humble-perception-jammy
FROM ubuntu:jammy

# Set up the shell
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ENV DEBIAN_FRONTEND=noninteractive
ARG DEBCONF_NONINTERACTIVE_SEEN=true
ENV TZ=America/New_York

ENV NVIDIA_DRIVER_CAPABILITIES all
ENV NVIDIA_VISIBLE_DEVICES all

ARG L4T_VERSION="35.4"
ARG ROS_VERSION="ROS2"
ARG ROS_DISTRO="humble"
ENV ROS_DISTRO=${ROS_DISTRO}
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

# Torch links: https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048
ARG CUDA=11-8
ARG cudnn_version=8.6.0.166-1+cuda11.4
ARG tensorrt_version=8.5.2-1+cuda11.4
ARG TORCH_INSTALL=https://developer.download.nvidia.cn/compute/redist/jp/v512/pytorch/torch-2.1.0a0+41361538.nv23.06-cp38-cp38-linux_aarch64.whl

## For Jetpack 6
#ARG CUDA=12-2
#ARG cudnn_version=8.6.0.166-1+cuda11.4
#ARG ensorrt_version=8.5.2-1+cuda11.4
#ARG TORCH_INSTALL=https://developer.download.nvidia.com/compute/redist/jp/v60dp/pytorch/torch-2.2.0a0+81ea7a4.nv24.01-cp310-cp310-linux_aarch64.whl

# Install Sudo
RUN apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -yq sudo tzdata && \
    ln -fns /usr/share/zoneinfo/${TZ} /etc/localtime && echo $TZ > /etc/timezone && \
    dpkg-reconfigure -f noninteractive tzdata

# Install packages
RUN sudo apt-get update -y && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    sudo \
    git \
    curl \
    wget \
    less \
    zstd \
    udev \
    unzip \
    build-essential \
    apt-transport-https \
    binutils \
    xz-utils \
    ca-certificates \
    lsb-release \
    gnupg2 \
    pkg-config \
    swig \
    libpython3-dev \
    python3-dev \
    python3 \
    python3-pip \
    python3-setuptools \
    python3-numpy \
    python3-matplotlib \
    python3-pil \
    python3-yaml \
    python3-tk \
    python3-pyqt5 \
    python3-bloom \
    libssl-dev && \
    sudo rm -rf /var/lib/apt/lists/*

RUN sudo apt-get update -y && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    autoconf \
    bc \
    build-essential \
    cmake \
    ffmpeg \
    file \
    g++ \
    gcc \
    gettext-base \
    git \
    gfortran \
    hdf5-tools \
    iputils-ping \
    libatlas-base-dev \
    libavcodec-dev \
    libavdevice-dev \
    libavfilter-dev \
    libavformat-dev \
    libavutil-dev \
    libblas-dev \
    libbz2-dev \
    libc++-dev \
    libcgal-dev \
    libeigen3-dev \
    libffi-dev \
    libfreeimage-dev \
    libfreetype6-dev \
    libglew-dev \
    libgflags-dev \
    libgoogle-glog-dev \
    libgtk-3-dev \
    libgtk2.0-dev \
    libhdf5-dev \
    libjpeg-dev \
    libjpeg-turbo8-dev \
    libjpeg8-dev \
    liblapack-dev \
    liblapacke-dev \
    liblzma-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libomp-dev \
    libopenblas-dev \
    libopenexr-dev \
    libopenjp2-7 \
    libopenjp2-7-dev \
    libopenmpi-dev \
    libpng-dev \
    libpostproc-dev \
    libprotobuf-dev \
    libreadline-dev \
    libsndfile1 \
    libsqlite3-dev \
    libssl-dev \
    libswresample-dev \
    libswscale-dev \
    libtbb-dev \
    libtbb2 \
    libtesseract-dev \
    libtiff-dev \
    libv4l-dev \
    libwebp-dev \
    libx264-dev \
    libxine2-dev \
    libxslt1-dev \
    libxvidcore-dev \
    libxml2-dev \
    locales \
    moreutils \
#    openssl \
    pkg-config \
    python3-dev \
    python3-numpy \
    python3-pip \
    python3-matplotlib \
    qv4l2 \
    rsync \
    scons \
    v4l-utils \
    zlib1g-dev \
    zip \
    libopenblas-dev \
    libopenblas-base \
    ubuntu-restricted-extras && \
    sudo rm -rf /var/lib/apt/lists/*

# todo: downgrade python3 to 3.9 to use python3-libnvinfer python3-libnvinfer-dev
RUN python3 -m pip install --upgrade pip setuptools

# For Pytorch
RUN python3 -m pip install numpy=="1.26.1"

## download the CUDA Toolkit local installer
#RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/arm64/cuda-ubuntu2004.pin -O /etc/apt/preferences.d/cuda-repository-pin-600 && \
#    wget https://developer.download.nvidia.com/compute/cuda/12.2.2/local_installers/cuda-tegra-repo-ubuntu2004-12-2-local_12.2.2-1_arm64.deb && \
#    dpkg -i cuda-tegra-repo-*.deb && \
#    rm cuda-tegra-repo-*.deb
#
## add the signed keys
#RUN cp /var/cuda-tegra-repo-*/cuda-tegra-*-keyring.gpg /usr/share/keyrings/
#
## manually extract cuda-compat
#RUN mkdir /var/cuda-compat && \
#    cd /var/cuda-compat && \
#    ar x ../cuda-tegra-repo-*/cuda-compat-*.deb && \
#    tar xvf data.tar.xz -C / && \
#    rm -rf /var/cuda-compat
#
## install cuda-toolkit (doesn't depend on cuda-compat/nvidia-l4t-core)
#RUN apt-get update && \
#    apt-get install -y --no-install-recommends \
#            cuda-toolkit-* \
#    && rm -rf /var/lib/apt/lists/* \
#    && apt-get clean

# nvidia-l4t-core is a dependency for the rest of the packages, and is designed to be installed directly
# on the target device. This because it parses /proc/device-tree in the deb's .preinst script.
# We can manually install it by running the lines below. t234 is for Orin computers and t194 is for the Xavier series
RUN echo "deb https://repo.download.nvidia.com/jetson/common r${L4T_VERSION} main" >> /etc/apt/sources.list && \
    echo "deb https://repo.download.nvidia.com/jetson/t234 r${L4T_VERSION} main" >> /etc/apt/sources.list && \
    apt-key adv --fetch-key http://repo.download.nvidia.com/jetson/jetson-ota-public.asc && \
    mkdir -p /opt/nvidia/l4t-packages/ && \
    touch /opt/nvidia/l4t-packages/.nv-l4t-disable-boot-fw-update-in-preinstall && \
    rm -f /etc/ld.so.conf.d/nvidia-tegra.conf && apt-get update && \
    apt-get install -y --no-install-recommends nvidia-l4t-core nvidia-l4t-gstreamer

# Install CUDA
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/arm64/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb && \
    apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends \
    cuda-${CUDA} \
    cuda-compat-${CUDA} \
    cuda-toolkit-${CUDA} \
    cuda-command-line-tools-${CUDA} && \
    apt-get clean && rm -rf /var/lib/apt/lists/* cuda-keyring_1.0-1_all.deb

# Install cuDNN
RUN apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends \
    libcudnn8=${cudnn_version} && \
    sudo apt-mark hold libcudnn8 && \
    DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends libcudnn8-dev=${cudnn_version} && \
    sudo apt-mark hold libcudnn8-dev && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install TensorRT
RUN apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends \
    libnvinfer8=${tensorrt_version} \
    libnvonnxparsers8=${tensorrt_version} \
    libnvparsers8=${tensorrt_version} \
    libnvinfer-plugin8=${tensorrt_version} && \
    sudo apt-mark hold libnvinfer8 libnvonnxparsers8 libnvparsers8 libnvinfer-plugin8 && \
    DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends \
    libnvinfer-dev=${tensorrt_version} \
    libnvonnxparsers-dev=${tensorrt_version} \
    libnvparsers-dev=${tensorrt_version} \
    libnvinfer-plugin-dev=${tensorrt_version}\
    libnvinfer-headers-dev=${tensorrt_version} \
    libnvinfer-headers-plugin-dev=${tensorrt_version} \
    tensorrt tensorrt-dev && \
#    DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends python3-libnvinfer python3-libnvinfer-dev && \
    sudo apt-mark hold libnvinfer-dev libnvonnxparsers-dev && \
    DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends \
    libnvparsers-dev libnvinfer-plugin-dev && \
#    libnvinfer-headers-dev \
#    libnvinfer-headers-plugin-dev && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Pytorch. todo compile pytorch from sources
#RUN python3 -m pip install --upgrade --no-cache $TORCH_INSTALL

#RUN apt-get -y upgrade --allow-downgrades &&  apt-get clean && rm -rf /var/lib/apt/lists/*

ENV CUDA_HOME="/usr/local/cuda"
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/compat:/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"
ENV OPENBLAS_CORETYPE=ARMV8
#export PATH=/usr/local/cuda-12.4/bin${PATH:+:${PATH}}

## Install ROS. todo
#ENV LANG en_US.UTF-8
#RUN apt update && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends \
#    locales && \
#    sudo locale-gen en_US en_US.UTF-8  && \
#    sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8  && \
#    export LANG=en_US.UTF-8  && \
#    DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends software-properties-common && \
#    sudo add-apt-repository -y universe && \
#    sudo apt update && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends curl && \
#    sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
#    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
#    sudo apt update && sudo apt upgrade -y && \
#    sudo apt update && DEBIAN_FRONTEND="noninteractive" sudo apt install -y python3-rosdep ros-humble-desktop ros-humble-perception ros-dev-tools && \
#    DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends ros-humble-rmw-cyclonedds-cpp && \
#    sudo rm -rf /var/lib/apt/lists/* && \
#    source /opt/ros/humble/setup.bash && \
#    export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp && \
#    sudo apt upgrade -y && \
#    sudo rosdep init && \
#    rosdep update

ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc

RUN sudo apt-get update -y && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-humble-desktop-full ros-humble-rmw-cyclonedds-cpp

WORKDIR /